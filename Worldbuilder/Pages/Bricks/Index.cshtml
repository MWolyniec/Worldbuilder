@page
@model Worldbuilder.Pages.Bricks.IndexModel

@{
    ViewData["Title"] = "Bricks";
}

<h1>Bricks</h1>

<p>
    <a asp-page="Create">Create new</a> | <a asp-page="../Categories/Create">Create new category</a> | <a asp-page="../Categories/Index">View categories</a>
</p>

<form>
    <p>
        <select asp-for="BrickCategory" asp-items="Model.Categories">
            <option value="">All</option>
        </select>
        Look for: <input type="text" asp-for="SearchString" />
        <input type="submit" value="Filter" />
    </p>
</form>

<table class="table" style="text-align:center;">
    <thead>
        <tr>
            <th style="text-align:left;">
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort">
                    @Html.DisplayNameFor(model => model.Brick[0].Name)
                </a>
            </th>
            <th style="text-align:left;">
                @Html.DisplayNameFor(model => model.Brick[0].ShortDesc)
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.CategorySort">
                    @Html.DisplayNameFor(model => model.Brick[0].BrickCategories)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Brick[0].Children)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Brick[0].Parents)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var item in Model.Brick)
        {
            <tr>
                <td style="text-align:left;">
                    <a asp-page="./Details" asp-route-id="@item.Id">
                        @Html.DisplayFor(modelItem => item.Name)
                    </a>
                </td>
                <td style="text-align:left;">
                    @Html.DisplayFor(modelItem => item.ShortDesc)
                </td>
                <td>
                    @if(item.BrickCategories != null)
                    {
                        foreach(var category in item.BrickCategories)
                        {
                            <text>| </text>
                            <a asp-page="/Categories/Details" asp-route-id="@item.Id">
                                @Html.DisplayFor(modelItem => category.Category.Name)
                            </a>
                            <text> |</text>
                        }
                    }
                </td>
                <td>
                    @if(item.Children != null)
                    {
                        foreach(var child in item.Children)
                        {
                            <text>></text>
                            <a asp-page="./Details" asp-route-id="@child.Child.Id">
                                @Html.DisplayFor(modelItem => child.Child.Name)
                            </a>
                        }
                    }
                </td>
                <td>
                    @if(item.Parents != null)
                    {
                        foreach(var parent in item.Parents)
                        {
                            <text>></text>
                            <a asp-page="./Details" asp-route-id="@parent.Brick.Id">
                                @Html.DisplayFor(modelItem => parent.Brick.Name)
                            </a>
                        }
                    }
                </td>
                <td>
                    <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.Brick.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Brick.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Brick.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Brick.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-default @nextDisabled">
    Next
</a>
